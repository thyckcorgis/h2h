{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\William\\\\Desktop\\\\thyckcorgishub\\\\h2h\\\\client\\\\components\\\\CustomCardScreen.tsx\";\nimport * as React from \"react\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useState } from \"react\";\nimport socket from \"../socket\";\nexport default function CustomCardScreen(_ref) {\n  var navigation = _ref.navigation,\n      route = _ref.route;\n  var _route$params = route.params,\n      code = _route$params.code,\n      name = _route$params.name,\n      current = _route$params.current,\n      card = _route$params.card,\n      users = _route$params.users,\n      isHost = _route$params.isHost;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      question = _useState2[0],\n      setQuestion = _useState2[1];\n\n  var submitCardHandler = function submitCardHandler() {\n    socket.emit('custom', code, question, function (data) {\n      console.log(data);\n    });\n    navigation.navigate(\"Game\", {\n      code: code,\n      current: current,\n      card: card,\n      name: name,\n      users: users,\n      isHost: isHost\n    });\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.screen,\n    behavior: \"padding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.bigText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, \"Add custom card to be read anonymously\"), React.createElement(TextInput, {\n    multiline: true,\n    style: styles.inputField,\n    placeholder: \"Input question\",\n    placeholderTextColor: \"black\",\n    onChangeText: function onChangeText(text) {\n      return setQuestion(text);\n    },\n    value: question,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: \"Submit\",\n    onPress: submitCardHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  screen: {\n    padding: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    flex: 1,\n    backgroundColor: \"black\"\n  },\n  inputField: {\n    padding: 5,\n    marginTop: 10,\n    width: 250,\n    textAlign: \"left\",\n    alignSelf: \"center\",\n    borderBottomWidth: 1,\n    borderColor: \"white\",\n    fontSize: 18,\n    color: \"white\",\n    fontFamily: \"Avenir-Light\"\n  },\n  bigText: {\n    fontFamily: \"Avenir-Light\",\n    fontSize: 30,\n    color: \"white\",\n    textAlign: 'center'\n  }\n});","map":{"version":3,"sources":["C:/Users/William/Desktop/thyckcorgishub/h2h/client/components/CustomCardScreen.tsx"],"names":["React","useState","socket","CustomCardScreen","navigation","route","params","code","name","current","card","users","isHost","question","setQuestion","submitCardHandler","emit","data","console","log","navigate","styles","screen","bigText","inputField","text","StyleSheet","create","padding","alignItems","justifyContent","flex","backgroundColor","marginTop","width","textAlign","alignSelf","borderBottomWidth","borderColor","fontSize","color","fontFamily"],"mappings":"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","sourcesContent":["import { StackNavigationHelpers } from \"@react-navigation/stack/lib/typescript/src/types\";\r\nimport * as React from \"react\";\r\nimport {\r\n  KeyboardAvoidingView,\r\n  Text,\r\n  Button,\r\n  TextInput,\r\n  StyleSheet,\r\n} from \"react-native\";\r\nimport { useState } from \"react\";\r\nimport socket from \"../socket\";\r\n\r\ninterface CustomCardScreenProps {\r\n  navigation: StackNavigationHelpers;\r\n  route: any;\r\n}\r\n\r\nexport default function CustomCardScreen({\r\n  navigation,\r\n  route,\r\n}: CustomCardScreenProps) {\r\n  const {\r\n    code,\r\n    name,\r\n    current: current,\r\n    card: card,\r\n    users: users,\r\n    isHost: isHost,\r\n  } = route.params;\r\n  const [question, setQuestion] = useState(\"\");\r\n\r\n  const submitCardHandler = () => {\r\n    socket.emit('custom', code, question, \r\n    (data: any) => {\r\n      console.log(data);\r\n    })\r\n    navigation.navigate(\"Game\", {\r\n      code,\r\n      current,\r\n      card,\r\n      name,\r\n      users,\r\n      isHost,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <KeyboardAvoidingView style={styles.screen} behavior=\"padding\">\r\n      <Text style={styles.bigText}>Add custom card to be read anonymously</Text>\r\n      <TextInput\r\n        multiline={true}\r\n        style={styles.inputField}\r\n        placeholder=\"Input question\"\r\n        placeholderTextColor=\"black\"\r\n        onChangeText={(text) => setQuestion(text)}\r\n        value={question}\r\n      />\r\n      <Button\r\n        title=\"Submit\"\r\n        onPress={submitCardHandler}\r\n      />\r\n    </KeyboardAvoidingView>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    padding: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    flex: 1,\r\n    backgroundColor: \"black\",\r\n  },\r\n  inputField: {\r\n    padding: 5,\r\n    marginTop: 10,\r\n    // marginBottom: 20,\r\n    width: 250,\r\n    textAlign: \"left\",\r\n    alignSelf: \"center\",\r\n    borderBottomWidth: 1,\r\n    borderColor: \"white\",\r\n    fontSize: 18,\r\n    color: \"white\",\r\n    fontFamily: \"Avenir-Light\",\r\n  },\r\n  bigText: {\r\n    fontFamily: \"Avenir-Light\",\r\n    fontSize: 30,\r\n    color: \"white\",\r\n    textAlign: 'center'\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}